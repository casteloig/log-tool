// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngesterServiceClient is the client API for IngesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngesterServiceClient interface {
	PushToIngester(ctx context.Context, in *RequestReceivedProto, opts ...grpc.CallOption) (*Response, error)
}

type ingesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngesterServiceClient(cc grpc.ClientConnInterface) IngesterServiceClient {
	return &ingesterServiceClient{cc}
}

func (c *ingesterServiceClient) PushToIngester(ctx context.Context, in *RequestReceivedProto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.IngesterService/PushToIngester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngesterServiceServer is the server API for IngesterService service.
// All implementations must embed UnimplementedIngesterServiceServer
// for forward compatibility
type IngesterServiceServer interface {
	PushToIngester(context.Context, *RequestReceivedProto) (*Response, error)
	mustEmbedUnimplementedIngesterServiceServer()
}

// UnimplementedIngesterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngesterServiceServer struct {
}

func (UnimplementedIngesterServiceServer) PushToIngester(context.Context, *RequestReceivedProto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToIngester not implemented")
}
func (UnimplementedIngesterServiceServer) mustEmbedUnimplementedIngesterServiceServer() {}

// UnsafeIngesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngesterServiceServer will
// result in compilation errors.
type UnsafeIngesterServiceServer interface {
	mustEmbedUnimplementedIngesterServiceServer()
}

func RegisterIngesterServiceServer(s grpc.ServiceRegistrar, srv IngesterServiceServer) {
	s.RegisterService(&IngesterService_ServiceDesc, srv)
}

func _IngesterService_PushToIngester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReceivedProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngesterServiceServer).PushToIngester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IngesterService/PushToIngester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngesterServiceServer).PushToIngester(ctx, req.(*RequestReceivedProto))
	}
	return interceptor(ctx, in, info, handler)
}

// IngesterService_ServiceDesc is the grpc.ServiceDesc for IngesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IngesterService",
	HandlerType: (*IngesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushToIngester",
			Handler:    _IngesterService_PushToIngester_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}
